// Auto generated by io.soabase.recordbuilder.core.RecordBuilder: https://github.com/Randgalt/record-builder
package com.taotao.cloud.message.application.dto.email.cmmond;

import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.NotBlank;
import java.util.AbstractMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.annotation.processing.Generated;

@Generated("io.soabase.recordbuilder.core.RecordBuilder")
public class EmailAddCmdBuilder {
    private String fromUser;

    private String host;

    private String pass;

    private Integer port;

    private String user;

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private EmailAddCmdBuilder() {
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private EmailAddCmdBuilder(String fromUser, String host, String pass, Integer port,
            String user) {
        this.fromUser = fromUser;
        this.host = host;
        this.pass = pass;
        this.port = port;
        this.user = user;
    }

    /**
     * Static constructor/builder. Can be used instead of new EmailAddCmd(...)
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static EmailAddCmd EmailAddCmd(@NotBlank(message = "收件人不能为空") String fromUser,
            String host, String pass, @Max(value = 200L, message = "端口不能大于200") Integer port,
            String user) {
        return new EmailAddCmd(fromUser, host, pass, port, user);
    }

    /**
     * Return a new builder with all fields set to default Java values
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static EmailAddCmdBuilder builder() {
        return new EmailAddCmdBuilder();
    }

    /**
     * Return a new builder with all fields set to the values taken from the given record instance
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static EmailAddCmdBuilder builder(EmailAddCmd from) {
        return new EmailAddCmdBuilder(from.fromUser(), from.host(), from.pass(), from.port(), from.user());
    }

    /**
     * Return a "with"er for an existing record instance
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static EmailAddCmdBuilder.With from(EmailAddCmd from) {
        return new _FromWith(from);
    }

    /**
     * Return a stream of the record components as map entries keyed with the component name and the value as the component value
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static Stream<Map.Entry<String, Object>> stream(EmailAddCmd record) {
        return Stream.of(new AbstractMap.SimpleImmutableEntry<>("fromUser", record.fromUser()),
                 new AbstractMap.SimpleImmutableEntry<>("host", record.host()),
                 new AbstractMap.SimpleImmutableEntry<>("pass", record.pass()),
                 new AbstractMap.SimpleImmutableEntry<>("port", record.port()),
                 new AbstractMap.SimpleImmutableEntry<>("user", record.user()));
    }

    /**
     * Return a new record instance with all fields set to the current values in this builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public EmailAddCmd build() {
        return new EmailAddCmd(fromUser, host, pass, port, user);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public String toString() {
        return "EmailAddCmdBuilder[fromUser=" + fromUser + ", host=" + host + ", pass=" + pass + ", port=" + port + ", user=" + user + "]";
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public int hashCode() {
        return Objects.hash(fromUser, host, pass, port, user);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public boolean equals(Object o) {
        return (this == o) || ((o instanceof EmailAddCmdBuilder r)
                && Objects.equals(fromUser, r.fromUser)
                && Objects.equals(host, r.host)
                && Objects.equals(pass, r.pass)
                && Objects.equals(port, r.port)
                && Objects.equals(user, r.user));
    }

    /**
     * Set a new value for the {@code fromUser} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public EmailAddCmdBuilder fromUser(@NotBlank(message = "收件人不能为空") String fromUser) {
        this.fromUser = fromUser;
        return this;
    }

    /**
     * Return the current value for the {@code fromUser} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @NotBlank(
            message = "收件人不能为空"
    )
    public String fromUser() {
        return fromUser;
    }

    /**
     * Set a new value for the {@code host} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public EmailAddCmdBuilder host(String host) {
        this.host = host;
        return this;
    }

    /**
     * Return the current value for the {@code host} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String host() {
        return host;
    }

    /**
     * Set a new value for the {@code pass} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public EmailAddCmdBuilder pass(String pass) {
        this.pass = pass;
        return this;
    }

    /**
     * Return the current value for the {@code pass} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String pass() {
        return pass;
    }

    /**
     * Set a new value for the {@code port} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public EmailAddCmdBuilder port(@Max(value = 200L, message = "端口不能大于200") Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Return the current value for the {@code port} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Max(
            value = 200L,
            message = "端口不能大于200"
    )
    public Integer port() {
        return port;
    }

    /**
     * Set a new value for the {@code user} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public EmailAddCmdBuilder user(String user) {
        this.user = user;
        return this;
    }

    /**
     * Return the current value for the {@code user} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String user() {
        return user;
    }

    /**
     * Add withers to {@code EmailAddCmd}
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public interface With {
        /**
         * Return the current value for the {@code fromUser} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        @NotBlank(
                message = "收件人不能为空"
        )
        String fromUser();

        /**
         * Return the current value for the {@code host} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String host();

        /**
         * Return the current value for the {@code pass} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String pass();

        /**
         * Return the current value for the {@code port} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        @Max(
                value = 200L,
                message = "端口不能大于200"
        )
        Integer port();

        /**
         * Return the current value for the {@code user} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String user();

        /**
         * Return a new record builder using the current values
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default EmailAddCmdBuilder with() {
            return new EmailAddCmdBuilder(fromUser(), host(), pass(), port(), user());
        }

        /**
         * Return a new record built from the builder passed to the given consumer
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default EmailAddCmd with(Consumer<EmailAddCmdBuilder> consumer) {
            EmailAddCmdBuilder builder = with();
            consumer.accept(builder);
            return builder.build();
        }

        /**
         * Return a new instance of {@code EmailAddCmd} with a new value for {@code fromUser}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default EmailAddCmd withFromUser(@NotBlank(message = "收件人不能为空") String fromUser) {
            return new EmailAddCmd(fromUser, host(), pass(), port(), user());
        }

        /**
         * Return a new instance of {@code EmailAddCmd} with a new value for {@code host}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default EmailAddCmd withHost(String host) {
            return new EmailAddCmd(fromUser(), host, pass(), port(), user());
        }

        /**
         * Return a new instance of {@code EmailAddCmd} with a new value for {@code pass}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default EmailAddCmd withPass(String pass) {
            return new EmailAddCmd(fromUser(), host(), pass, port(), user());
        }

        /**
         * Return a new instance of {@code EmailAddCmd} with a new value for {@code port}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default EmailAddCmd withPort(@Max(value = 200L, message = "端口不能大于200") Integer port) {
            return new EmailAddCmd(fromUser(), host(), pass(), port, user());
        }

        /**
         * Return a new instance of {@code EmailAddCmd} with a new value for {@code user}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default EmailAddCmd withUser(String user) {
            return new EmailAddCmd(fromUser(), host(), pass(), port(), user);
        }
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private static final class _FromWith implements EmailAddCmdBuilder.With {
        private final EmailAddCmd from;

        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        private _FromWith(EmailAddCmd from) {
            this.from = from;
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String fromUser() {
            return from.fromUser();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String host() {
            return from.host();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String pass() {
            return from.pass();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public Integer port() {
            return from.port();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String user() {
            return from.user();
        }
    }
}
